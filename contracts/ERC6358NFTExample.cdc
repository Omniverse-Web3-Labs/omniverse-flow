import NonFungibleToken from "./NonFungibleToken.cdc"
import MetadataViews from "./MetadataViews.cdc"
import ERC6358Protocol from "./ERC6358Protocol.cdc"
import IERC6358Token from "./IERC6358Token.cdc"

pub contract ERC6358NFTExample: NonFungibleToken, IERC6358Token{
    
    pub var totalSupply: UInt64;                            // The total number of tokens of this type in existence
    pub let CollectionStoragePath: StoragePath;
    pub let CollectionPublicPath: PublicPath;

    pub let flowChainID: UInt32;
    pub let contractName: String;

    pub let allowedMembers: {UInt32: String};               // value is generated by `String.encodeHex(contract address: [UInt8])`
    pub let lockPeriod: UFix64;                             // In current version, there needs to be a wait time for omniverse transactions to be executed

    priv let transactionRecorder: {String: ERC6358Protocol.RecordedCertificate};    // key is generated by `String.encodeHex(publicKey: [UInt8])`
    priv let TokenShelter: @{String: [{IERC6358Token.IERC6358TokenExec}]};          // Store pending tokens
    

    /////////////////////////////////////////////////////////////////////////////////////////////////
    pub event ContractInitialized()                         // Event that emitted when the NFT contract is initialized
    pub event Withdraw(id: UInt64, from: Address?)          // Event that is emitted when a token is withdrawn,
    pub event Deposit(id: UInt64, to: Address?)             // Event that emitted when a token is deposited to a collection.

    // Omniverse NFT
    pub resource NFT: NonFungibleToken.INFT, MetadataViews.Resolver, IERC6358Token.IERC6358TokenExec {
        pub let id: UInt64;
        
        access(account) var lockedTime: UFix64;

        // Information
        pub let name: String
        pub let description: String
        pub let thumbnail: String
        access(self) let royalties: [MetadataViews.Royalty]
        access(self) let metadata: {String: AnyStruct}

        init(
            id: UInt64,
            name: String,
            description: String,
            thumbnail: String,
            royalties: [MetadataViews.Royalty],
            metadata: {String: AnyStruct},
        ) {

            self.lockedTime = 0.0

            // Information
            self.id = id
            self.name = name
            self.description = description
            self.thumbnail = thumbnail
            self.royalties = royalties
            self.metadata = metadata
        }

        pub fun getViews(): [Type] {
            return [
                Type<MetadataViews.Display>(),
                Type<MetadataViews.Royalties>(),
                Type<MetadataViews.Editions>(),
                Type<MetadataViews.ExternalURL>(),
                Type<MetadataViews.NFTCollectionData>(),
                Type<MetadataViews.NFTCollectionDisplay>(),
                Type<MetadataViews.Serial>(),
                Type<MetadataViews.Traits>()
            ]
        }

        pub fun resolveView(_ view: Type): AnyStruct? {
            switch view {
                case Type<MetadataViews.Display>():
                    return MetadataViews.Display(
                        name: self.name,
                        description: self.description,
                        thumbnail: MetadataViews.HTTPFile(
                            url: self.thumbnail
                        )
                    )
                case Type<MetadataViews.Editions>():
                    // There is no max number of NFTs that can be minted from this contract
                    // so the max edition field value is set to nil
                    let editionInfo = MetadataViews.Edition(name: "Example NFT Edition", number: self.id, max: nil)
                    let editionList: [MetadataViews.Edition] = [editionInfo]
                    return MetadataViews.Editions(
                        editionList
                    )
                case Type<MetadataViews.Serial>():
                    return MetadataViews.Serial(
                        self.id
                    )
                case Type<MetadataViews.Royalties>():
                    return MetadataViews.Royalties(
                        self.royalties
                    )
                case Type<MetadataViews.ExternalURL>():
                    return MetadataViews.ExternalURL("https://example-nft.onflow.org/".concat(self.id.toString()))
                case Type<MetadataViews.NFTCollectionData>():
                    return MetadataViews.NFTCollectionData(
                        storagePath: ERC6358NFTExample.CollectionStoragePath,
                        publicPath: ERC6358NFTExample.CollectionPublicPath,
                        providerPath: /private/exampleNFTCollection,
                        publicCollection: Type<&ERC6358NFTExample.Collection{NonFungibleToken.CollectionPublic}>(),
                        publicLinkedType: Type<&ERC6358NFTExample.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Receiver,MetadataViews.ResolverCollection}>(),
                        providerLinkedType: Type<&ERC6358NFTExample.Collection{NonFungibleToken.CollectionPublic,NonFungibleToken.Provider,MetadataViews.ResolverCollection}>(),
                        createEmptyCollectionFunction: (fun (): @NonFungibleToken.Collection {
                            return <-ERC6358NFTExample.createEmptyCollection()
                        })
                    )
                case Type<MetadataViews.NFTCollectionDisplay>():
                    let media = MetadataViews.Media(
                        file: MetadataViews.HTTPFile(
                            url: "https://assets.website-files.com/5f6294c0c7a8cdd643b1c820/5f6294c0c7a8cda55cb1c936_Flow_Wordmark.svg"
                        ),
                        mediaType: "image/svg+xml"
                    )
                    return MetadataViews.NFTCollectionDisplay(
                        name: "The Example Collection",
                        description: "This collection is used as an example to help you develop your next Flow NFT.",
                        externalURL: MetadataViews.ExternalURL("https://example-nft.onflow.org"),
                        squareImage: media,
                        bannerImage: media,
                        socials: {
                            "twitter": MetadataViews.ExternalURL("https://twitter.com/flow_blockchain")
                        }
                    )
                case Type<MetadataViews.Traits>():
                    // exclude mintedTime and foo to show other uses of Traits
                    let excludedTraits = ["mintedTime", "foo"]
                    let traitsView = MetadataViews.dictToTraits(dict: self.metadata, excludedNames: excludedTraits)

                    // mintedTime is a unix timestamp, we should mark it with a displayType so platforms know how to show it.
                    let mintedTimeTrait = MetadataViews.Trait(name: "mintedTime", value: self.metadata["mintedTime"]!, displayType: "Date", rarity: nil)
                    traitsView.addTrait(mintedTimeTrait)

                    // foo is a trait with its own rarity
                    let fooTraitRarity = MetadataViews.Rarity(score: 10.0, max: 100.0, description: "Common")
                    let fooTrait = MetadataViews.Trait(name: "foo", value: self.metadata["foo"], displayType: nil, rarity: fooTraitRarity)
                    traitsView.addTrait(fooTrait)
                    
                    return traitsView

            }
            return nil
        }

        access(account) fun setLockedTime() {
            self.lockedTime = getCurrentBlock().timestamp;
        }

        pub fun getLockedTime(): UFix64{
            return self.lockedTime;
        }
    }

    pub resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection, IERC6358Token.IERC6358Operation {
        // dictionary of NFT conforming tokens
        // NFT is a resource type with an `UInt64` ID field
        pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

        init() {
            self.ownedNFTs <- {};
        }

        pub destroy() {
            destroy self.ownedNFTs;
        }
        
        // withdraw removes an NFT from the collection and moves it to the caller
        pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {
            panic("`withdraw` is deprecated in OmniverseNFT");
        }

        // deposit takes a NFT and adds it to the collections dictionary
        // and adds the ID to the id array
        pub fun deposit(token: @NonFungibleToken.NFT) {
            panic("`deposit` is deprecated in OmniverseNFT");
        }
        
        // getIDs returns an array of the IDs that are in the collection
        pub fun getIDs(): [UInt64] {
            return self.ownedNFTs.keys
        }

        // borrowNFT gets a reference to an NFT in the collection
        // so that the caller can read its metadata and call its methods
        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
            return (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!
        }

        pub fun borrowViewResolver(id: UInt64): &AnyResource{MetadataViews.Resolver} {
            let nft = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
            let exampleNFT = nft as! &ERC6358NFTExample.NFT
            return exampleNFT as &AnyResource{MetadataViews.Resolver}
        }

        ////////////////////////////////////////////
        // Operations of ERC6358 defination for Flow
        pub fun sendOmniverseTransaction(txData: AnyStruct{IERC6358TxProtocol}) {
            panic("Has not been implemented yet!");
        }

        // Not in the `EIP-6358` standard, but necessary in Flow
        access(account) fun omniverseExec(omniToken: @AnyResource{IERC6358TokenExec}) {
            panic("Has not been implemented yet!");
        }
    }

    init() {
        self.totalSupply = 0;

        self.flowChainID = 7;
        self.contractName = self.account.address.toString().concat(".ERC6358NFTExample");

        self.allowedMembers = {};

        self.lockPeriod = 10.0 * 60.0;

        self.CollectionStoragePath = /storage/ERC6358NFTExampleCollection;
        self.CollectionPublicPath = /public/ERC6358NFTExampleCollection;
    }

    // public function that anyone can call to create a new empty collection
    pub fun createEmptyCollection(): @NonFungibleToken.Collection {
        return <- create Collection()
    }

    // Omniverse Operations
    pub fun omniverseMint(otx: AnyStruct{IERC6358Token.IERC6358TxProtocol}) {
        panic("Has not been implemented yet!");
    }

    pub fun getTransactionCount(pk: [UInt8]): UInt128 {
        panic("Has not been implemented yet!");
    }

    pub fun getTransactionData(user: [UInt8], nonce: UInt128): AnyStruct{IERC6358Token.IERC6358TxData} {
        panic("Has not been implemented yet!");
    }
}
 